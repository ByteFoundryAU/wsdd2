From 0e915c24c6eaa43f2babf6264fd7540ef443c770 Mon Sep 17 00:00:00 2001
From: Justin Maggard <jmaggard@netgear.com>
Date: Tue, 6 Sep 2016 15:10:28 -0700
Subject: [PATCH] wsdd2: Fix several memory leaks

Fix a couple leaks found by coverity, and other leak when returning a
SOAP fault.

While we're at it, fix the signal handler to properly quit even while
we're process a message, and skip LeafNets adapters.

Fixes: Bug #22016 (RN20400 - Stephanie Bejarano - wsdd2 service uses high memory/ ReadyNAS frequently locks up)
---
 packages/wsdd2/debian/rules |  2 +-
 packages/wsdd2/llmnr.c      |  2 ++
 packages/wsdd2/wsd.c        | 23 ++++++++++++++---------
 packages/wsdd2/wsdd.h       |  2 --
 packages/wsdd2/wsdd2.c      | 33 +++++++++++----------------------
 5 files changed, 28 insertions(+), 34 deletions(-)

diff --git a/packages/wsdd2/debian/rules b/packages/wsdd2/debian/rules
index 510eff2..5f8584b 100755
--- a/packages/wsdd2/debian/rules
+++ b/packages/wsdd2/debian/rules
@@ -5,7 +5,7 @@ export CFLAGS := -g -O2 -Wall -fstack-protector --param=ssp-buffer-size=4 -Wform
 export CPPFLAGS := -D_FORTIFY_SOURCE=2
 export CXXFLAGS := -g -O2 -Wall -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security
 export FFLAGS := -g -O2
-export LDFLAGS := -Wl,-z,relro
+export LDFLAGS := -g -Wl,-z,relro
 
 %:
 	dh $@
diff --git a/packages/wsdd2/llmnr.c b/packages/wsdd2/llmnr.c
index df29b30..d12ca99 100644
--- a/packages/wsdd2/llmnr.c
+++ b/packages/wsdd2/llmnr.c
@@ -222,6 +222,7 @@ static int llmnr_send_response(struct endpoint *ep,
 	qtype = in_name_p[1]*256 + in_name_p[2];
 	if (qtype != DNS_TYPE_A && qtype != DNS_TYPE_AAAA) {
 		DEBUG(1, L, "llmnr: record in question not of type A or AAAA");
+		free(in_name);
 		return -1;
 	}
 
@@ -229,6 +230,7 @@ static int llmnr_send_response(struct endpoint *ep,
 	qclass = in_name_p[3]*256 + in_name_p[4];
 	if (qclass != DNS_CLASS_IN) {
 		DEBUG(1, L, "llmnr: record is not of class IN");
+		free(in_name);
 		return -1;
 	}
 
diff --git a/packages/wsdd2/wsd.c b/packages/wsdd2/wsd.c
index 51f1218..b3c5b51 100644
--- a/packages/wsdd2/wsd.c
+++ b/packages/wsdd2/wsd.c
@@ -496,6 +496,7 @@ static int wsd_send_soap_fault(int fd, struct endpoint *ep, _saddr_t *sa,
 	"</soap:Envelope>";
 
 	char *s;
+	int rv;
 	ssize_t len = asprintf(&s, soap_fault_fmt, code, 0, 0, reason, detail);
 
 	if (len <= 0) {
@@ -504,7 +505,10 @@ static int wsd_send_soap_fault(int fd, struct endpoint *ep, _saddr_t *sa,
 		return -1;
 	}
 
-	return wsd_send_msg(fd, ep, sa, s, len, 0);
+	rv = wsd_send_msg(fd, ep, sa, s, len, 0);
+	free(s);
+
+	return rv;
 }
 
 /*
@@ -749,6 +753,7 @@ static int send_http_resp_header(int fd, struct endpoint *ep,
 		"\r\n";
 
 	const char *status_str;
+	int rv = 0;
 
 	/*
 	 * HTTP status codes
@@ -793,9 +798,10 @@ static int send_http_resp_header(int fd, struct endpoint *ep,
 	if (wsd_send_msg(fd, ep, sa, s, len, 50000)) {
 		ep->errstr = "send_http_resp_header: send";
 		ep->_errno = errno;
+		rv = -1;
 	}
 	free(s);
-	return len > 0 ? 0 : -1;
+	return rv;
 }
 
 static char *netbiosname, *workgroup;
@@ -912,6 +918,8 @@ again:
 	while (*p && (eol = strstr(p, "\r\n")) != p) {
 		const char *val;
 
+		if (!eol)
+			break;
 		*eol = '\0';
 		if ((val = HEADER_IS(p, "Content-Type: "))) {
 			if (strcmp(val, "application/soap+xml")) {
@@ -1058,7 +1066,9 @@ int wsd_recv(struct endpoint *ep)
 			ep->_errno = errno;
 			return -1;
 		}
-		setsockopt(fd, SOL_SOCKET, SO_RCVTIMEO, &to, sizeof to);
+		if (setsockopt(fd, SOL_SOCKET, SO_RCVTIMEO, &to, sizeof to) < 0) {
+			DEBUG(3, W, "Unable to set receive timeout\n");
+		}
 		len = recv(fd, buf, sizeof buf - 1, 0);
 	} else
 		len = recvfrom(fd, buf, sizeof buf - 1, 0,
@@ -1121,7 +1131,7 @@ int wsd_recv(struct endpoint *ep)
 		break;
 	default:
 		DEBUG(2, W, "wsd_recv: Unsupported query");
-		return 0;
+		break;
 	}
 
 	if (rv)
@@ -1134,11 +1144,6 @@ int wsd_recv(struct endpoint *ep)
 	return 0;
 }
 
-int wsd_timer(struct endpoint *ep)
-{
-	return 0;
-}
-
 void wsd_exit(struct endpoint *ep)
 {
 	wsd_send_bye(ep);
diff --git a/packages/wsdd2/wsdd.h b/packages/wsdd2/wsdd.h
index 03df247..4315e4f 100644
--- a/packages/wsdd2/wsdd.h
+++ b/packages/wsdd2/wsdd.h
@@ -122,7 +122,6 @@ struct service {
 
 extern int wsd_init(struct endpoint *);
 extern int wsd_recv(struct endpoint *);
-extern int wsd_timer(struct endpoint *);
 extern void wsd_exit(struct endpoint *);
 
 extern int wsd_http(struct endpoint *);
@@ -134,7 +133,6 @@ extern void llmnr_exit(struct endpoint *);
 
 extern int connected_if(const _saddr_t *, _saddr_t *);
 extern char *ip2uri(const char *);
-extern char *ip2unc(const char *);
 
 extern int set_getresp(const char *, const char **);
 extern void printBootInfoKeys(FILE *, int);
diff --git a/packages/wsdd2/wsdd2.c b/packages/wsdd2/wsdd2.c
index a674c8d..3b31b30 100644
--- a/packages/wsdd2/wsdd2.c
+++ b/packages/wsdd2/wsdd2.c
@@ -222,24 +222,6 @@ char *ip2uri(const char *ip)
 	return uri;
 }
 
-char *ip2unc(const char *ip)
-{
-	if (*ip == '[' || !strchr(ip, ':'))
-		return strdup(ip);
-
-	const char *suffix = ".ipv6-literal.net";
-	char *p, *unc = malloc(strlen(ip) + strlen(suffix) + 1);
-
-	if (!unc)
-		return NULL;
-
-	strcpy(p = unc, ip);
-	while ((p = strchr(p, ':')))
-		*p = '-';
-	strcat(unc, suffix);
-	return unc;
-}
-
 static struct endpoint *endpoints;
 
 static const struct sock_params {
@@ -290,7 +272,7 @@ static int open_ep(struct endpoint **epp, struct service *sv,
 		err(EXIT_FAILURE, __FUNCTION__ ": malloc");
 	}
 
-	strncpy(ep->ifname, ifa->ifa_name, sizeof ep->ifname);
+	strncpy(ep->ifname, ifa->ifa_name, sizeof(ep->ifname)-1);
 	ep->service	= sv;
 	ep->family	= sv->family;
 	ep->type	= sv->type;
@@ -536,7 +518,13 @@ static int netlink_recv(struct endpoint *ep)
 static void sighandler(int sig)
 {
 	DEBUG(0, W, "%s received.", strsignal(sig));
-	restart = (sig == SIGHUP);
+	switch (sig) {
+	case SIGHUP:
+		restart = 1;
+		break;
+	default:
+		restart = 2;
+	}
 }
 
 static void help(const char *prog, int ec, const char *fmt, ...)
@@ -689,6 +677,7 @@ again:
 			for (ifa = ifaddrs; ifa; ifa = ifa->ifa_next) {
 				if (ifa->ifa_addr->sa_family != sv->family ||
 					(ifa->ifa_flags & IFF_LOOPBACK) ||
+					(!strcmp(ifa->ifa_name, "LeafNets")) ||
 					(sv->mcast_addr &&
 					!(ifa->ifa_flags & IFF_MULTICAST)))
 					continue;
@@ -764,7 +753,7 @@ again:
 						ep->service->recv(ep);
 				}
 			}
-		} while (n >= 0);
+		} while (n >= 0 && !restart);
 
 		if (n < 0 && errno != EINTR) {
 			syslog(LOG_USER | LOG_WARNING, "%s: select: %s",
@@ -799,7 +788,7 @@ end:
 		err(EXIT_FAILURE, "%s: %s", badservice, badbad);
 	}
 
-	if (restart) {
+	if (restart == 1) {
 		restart = 0;
 		goto again;
 	}
-- 
2.9.3

diff --git a/packages/wsdd2/debian/changelog b/packages/wsdd2/debian/changelog
index fbcb79c..9e6ed55 100644
--- a/packages/wsdd2/debian/changelog
+++ b/packages/wsdd2/debian/changelog
@@ -1,3 +1,9 @@
+wsdd2 (1.4) unstable; urgency=medium
+
+  * Fix some memory leaks.
+
+ -- Justin Maggard <justin.maggard@netgear.com>  Tue, 06 Sep 2016 15:13:10 -0700
+
 wsdd2 (1.3) unstable; urgency=medium
 
   * Filter out frequent IPv6 RA new address notifications.
